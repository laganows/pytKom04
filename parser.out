Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> parts
Rule 2     parts -> parts part
Rule 3     parts -> part
Rule 4     part -> fundef
Rule 5     part -> instruction
Rule 6     part -> declaration
Rule 7     declaration -> TYPE inits ;
Rule 8     declaration -> error ;
Rule 9     inits -> inits , init
Rule 10    inits -> init
Rule 11    init -> ID = expression
Rule 12    instructions -> instructions instruction
Rule 13    instructions -> instruction
Rule 14    instruction -> print_instr
Rule 15    instruction -> labeled_instr
Rule 16    instruction -> assignment
Rule 17    instruction -> choice_instr
Rule 18    instruction -> while_instr
Rule 19    instruction -> repeat_instr
Rule 20    instruction -> return_instr
Rule 21    instruction -> break_instr
Rule 22    instruction -> continue_instr
Rule 23    instruction -> compound_instr
Rule 24    instruction -> expression ;
Rule 25    print_instr -> PRINT expression ;
Rule 26    print_instr -> PRINT error ;
Rule 27    labeled_instr -> ID : instruction
Rule 28    assignment -> ID = expression ;
Rule 29    choice_instr -> IF ( condition ) instruction
Rule 30    choice_instr -> IF ( condition ) instruction ELSE instruction
Rule 31    choice_instr -> IF ( error ) instruction
Rule 32    choice_instr -> IF ( error ) instruction ELSE instruction
Rule 33    while_instr -> WHILE ( condition ) instruction
Rule 34    while_instr -> WHILE ( error ) instruction
Rule 35    repeat_instr -> REPEAT instructions UNTIL condition ;
Rule 36    return_instr -> RETURN expression ;
Rule 37    continue_instr -> CONTINUE ;
Rule 38    break_instr -> BREAK ;
Rule 39    compound_instr -> { parts }
Rule 40    condition -> expression
Rule 41    const -> INTEGER
Rule 42    const -> FLOAT
Rule 43    const -> STRING
Rule 44    expression -> const
Rule 45    expression -> ID
Rule 46    expression -> expression + expression
Rule 47    expression -> expression - expression
Rule 48    expression -> expression * expression
Rule 49    expression -> expression / expression
Rule 50    expression -> expression % expression
Rule 51    expression -> expression | expression
Rule 52    expression -> expression & expression
Rule 53    expression -> expression ^ expression
Rule 54    expression -> expression AND expression
Rule 55    expression -> expression OR expression
Rule 56    expression -> expression SHL expression
Rule 57    expression -> expression SHR expression
Rule 58    expression -> expression EQ expression
Rule 59    expression -> expression NEQ expression
Rule 60    expression -> expression > expression
Rule 61    expression -> expression < expression
Rule 62    expression -> expression LE expression
Rule 63    expression -> expression GE expression
Rule 64    expression -> ( expression )
Rule 65    expression -> ( error )
Rule 66    expression -> ID ( expr_list_or_empty )
Rule 67    expression -> ID ( error )
Rule 68    expr_list_or_empty -> expr_list
Rule 69    expr_list_or_empty -> <empty>
Rule 70    expr_list -> expr_list , expression
Rule 71    expr_list -> expression
Rule 72    fundef -> TYPE ID ( args_list_or_empty ) compound_instr
Rule 73    args_list_or_empty -> args_list
Rule 74    args_list_or_empty -> <empty>
Rule 75    args_list -> args_list , arg
Rule 76    args_list -> arg
Rule 77    arg -> TYPE ID

Terminals, with rules where they appear

%                    : 50
&                    : 52
(                    : 29 30 31 32 33 34 64 65 66 67 72
)                    : 29 30 31 32 33 34 64 65 66 67 72
*                    : 48
+                    : 46
,                    : 9 70 75
-                    : 47
/                    : 49
:                    : 27
;                    : 7 8 24 25 26 28 35 36 37 38
<                    : 61
=                    : 11 28
>                    : 60
AND                  : 54
BREAK                : 38
CONTINUE             : 37
ELSE                 : 30 32
EQ                   : 58
FLOAT                : 42
GE                   : 63
ID                   : 11 27 28 45 66 67 72 77
IF                   : 29 30 31 32
INTEGER              : 41
LE                   : 62
NEQ                  : 59
OR                   : 55
PRINT                : 25 26
REPEAT               : 35
RETURN               : 36
SHL                  : 56
SHR                  : 57
STRING               : 43
TYPE                 : 7 72 77
UNTIL                : 35
WHILE                : 33 34
^                    : 53
error                : 8 26 31 32 34 65 67
{                    : 39
|                    : 51
}                    : 39

Nonterminals, with rules where they appear

arg                  : 75 76
args_list            : 73 75
args_list_or_empty   : 72
assignment           : 16
break_instr          : 21
choice_instr         : 17
compound_instr       : 23 72
condition            : 29 30 33 35
const                : 44
continue_instr       : 22
declaration          : 6
expr_list            : 68 70
expr_list_or_empty   : 66
expression           : 11 24 25 28 36 40 46 46 47 47 48 48 49 49 50 50 51 51 52 52 53 53 54 54 55 55 56 56 57 57 58 58 59 59 60 60 61 61 62 62 63 63 64 70 71
fundef               : 4
init                 : 9 10
inits                : 7 9
instruction          : 5 12 13 27 29 30 30 31 32 32 33 34
instructions         : 12 35
labeled_instr        : 15
part                 : 2 3
parts                : 1 2 39
print_instr          : 14
program              : 0
repeat_instr         : 19
return_instr         : 20
while_instr          : 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . parts
    (2) parts -> . parts part
    (3) parts -> . part
    (4) part -> . fundef
    (5) part -> . instruction
    (6) part -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (7) declaration -> . TYPE inits ;
    (8) declaration -> . error ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    TYPE            shift and go to state 31
    error           shift and go to state 30
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    program                        shift and go to state 12
    assignment                     shift and go to state 16
    labeled_instr                  shift and go to state 17
    compound_instr                 shift and go to state 18
    part                           shift and go to state 19
    declaration                    shift and go to state 20
    break_instr                    shift and go to state 23
    instruction                    shift and go to state 24
    parts                          shift and go to state 25
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 33

state 1

    (42) const -> FLOAT .

    ;               reduce using rule 42 (const -> FLOAT .)
    +               reduce using rule 42 (const -> FLOAT .)
    -               reduce using rule 42 (const -> FLOAT .)
    *               reduce using rule 42 (const -> FLOAT .)
    /               reduce using rule 42 (const -> FLOAT .)
    %               reduce using rule 42 (const -> FLOAT .)
    |               reduce using rule 42 (const -> FLOAT .)
    &               reduce using rule 42 (const -> FLOAT .)
    ^               reduce using rule 42 (const -> FLOAT .)
    AND             reduce using rule 42 (const -> FLOAT .)
    OR              reduce using rule 42 (const -> FLOAT .)
    SHL             reduce using rule 42 (const -> FLOAT .)
    SHR             reduce using rule 42 (const -> FLOAT .)
    EQ              reduce using rule 42 (const -> FLOAT .)
    NEQ             reduce using rule 42 (const -> FLOAT .)
    >               reduce using rule 42 (const -> FLOAT .)
    <               reduce using rule 42 (const -> FLOAT .)
    LE              reduce using rule 42 (const -> FLOAT .)
    GE              reduce using rule 42 (const -> FLOAT .)
    )               reduce using rule 42 (const -> FLOAT .)
    ,               reduce using rule 42 (const -> FLOAT .)


state 2

    (36) return_instr -> RETURN . expression ;
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 35

state 3

    (17) instruction -> choice_instr .

    UNTIL           reduce using rule 17 (instruction -> choice_instr .)
    PRINT           reduce using rule 17 (instruction -> choice_instr .)
    ID              reduce using rule 17 (instruction -> choice_instr .)
    IF              reduce using rule 17 (instruction -> choice_instr .)
    WHILE           reduce using rule 17 (instruction -> choice_instr .)
    REPEAT          reduce using rule 17 (instruction -> choice_instr .)
    RETURN          reduce using rule 17 (instruction -> choice_instr .)
    BREAK           reduce using rule 17 (instruction -> choice_instr .)
    CONTINUE        reduce using rule 17 (instruction -> choice_instr .)
    {               reduce using rule 17 (instruction -> choice_instr .)
    (               reduce using rule 17 (instruction -> choice_instr .)
    INTEGER         reduce using rule 17 (instruction -> choice_instr .)
    FLOAT           reduce using rule 17 (instruction -> choice_instr .)
    STRING          reduce using rule 17 (instruction -> choice_instr .)
    }               reduce using rule 17 (instruction -> choice_instr .)
    TYPE            reduce using rule 17 (instruction -> choice_instr .)
    error           reduce using rule 17 (instruction -> choice_instr .)
    $end            reduce using rule 17 (instruction -> choice_instr .)
    ELSE            reduce using rule 17 (instruction -> choice_instr .)


state 4

    (25) print_instr -> PRINT . expression ;
    (26) print_instr -> PRINT . error ;
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 36
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 37

state 5

    (33) while_instr -> WHILE . ( condition ) instruction
    (34) while_instr -> WHILE . ( error ) instruction

    (               shift and go to state 38


state 6

    (19) instruction -> repeat_instr .

    UNTIL           reduce using rule 19 (instruction -> repeat_instr .)
    PRINT           reduce using rule 19 (instruction -> repeat_instr .)
    ID              reduce using rule 19 (instruction -> repeat_instr .)
    IF              reduce using rule 19 (instruction -> repeat_instr .)
    WHILE           reduce using rule 19 (instruction -> repeat_instr .)
    REPEAT          reduce using rule 19 (instruction -> repeat_instr .)
    RETURN          reduce using rule 19 (instruction -> repeat_instr .)
    BREAK           reduce using rule 19 (instruction -> repeat_instr .)
    CONTINUE        reduce using rule 19 (instruction -> repeat_instr .)
    {               reduce using rule 19 (instruction -> repeat_instr .)
    (               reduce using rule 19 (instruction -> repeat_instr .)
    INTEGER         reduce using rule 19 (instruction -> repeat_instr .)
    FLOAT           reduce using rule 19 (instruction -> repeat_instr .)
    STRING          reduce using rule 19 (instruction -> repeat_instr .)
    }               reduce using rule 19 (instruction -> repeat_instr .)
    TYPE            reduce using rule 19 (instruction -> repeat_instr .)
    error           reduce using rule 19 (instruction -> repeat_instr .)
    $end            reduce using rule 19 (instruction -> repeat_instr .)
    ELSE            reduce using rule 19 (instruction -> repeat_instr .)


state 7

    (20) instruction -> return_instr .

    UNTIL           reduce using rule 20 (instruction -> return_instr .)
    PRINT           reduce using rule 20 (instruction -> return_instr .)
    ID              reduce using rule 20 (instruction -> return_instr .)
    IF              reduce using rule 20 (instruction -> return_instr .)
    WHILE           reduce using rule 20 (instruction -> return_instr .)
    REPEAT          reduce using rule 20 (instruction -> return_instr .)
    RETURN          reduce using rule 20 (instruction -> return_instr .)
    BREAK           reduce using rule 20 (instruction -> return_instr .)
    CONTINUE        reduce using rule 20 (instruction -> return_instr .)
    {               reduce using rule 20 (instruction -> return_instr .)
    (               reduce using rule 20 (instruction -> return_instr .)
    INTEGER         reduce using rule 20 (instruction -> return_instr .)
    FLOAT           reduce using rule 20 (instruction -> return_instr .)
    STRING          reduce using rule 20 (instruction -> return_instr .)
    }               reduce using rule 20 (instruction -> return_instr .)
    TYPE            reduce using rule 20 (instruction -> return_instr .)
    error           reduce using rule 20 (instruction -> return_instr .)
    $end            reduce using rule 20 (instruction -> return_instr .)
    ELSE            reduce using rule 20 (instruction -> return_instr .)


state 8

    (44) expression -> const .

    +               reduce using rule 44 (expression -> const .)
    -               reduce using rule 44 (expression -> const .)
    *               reduce using rule 44 (expression -> const .)
    /               reduce using rule 44 (expression -> const .)
    %               reduce using rule 44 (expression -> const .)
    |               reduce using rule 44 (expression -> const .)
    &               reduce using rule 44 (expression -> const .)
    ^               reduce using rule 44 (expression -> const .)
    AND             reduce using rule 44 (expression -> const .)
    OR              reduce using rule 44 (expression -> const .)
    SHL             reduce using rule 44 (expression -> const .)
    SHR             reduce using rule 44 (expression -> const .)
    EQ              reduce using rule 44 (expression -> const .)
    NEQ             reduce using rule 44 (expression -> const .)
    >               reduce using rule 44 (expression -> const .)
    <               reduce using rule 44 (expression -> const .)
    LE              reduce using rule 44 (expression -> const .)
    GE              reduce using rule 44 (expression -> const .)
    ;               reduce using rule 44 (expression -> const .)
    )               reduce using rule 44 (expression -> const .)
    ,               reduce using rule 44 (expression -> const .)


state 9

    (64) expression -> ( . expression )
    (65) expression -> ( . error )
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 39
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 40

state 10

    (22) instruction -> continue_instr .

    UNTIL           reduce using rule 22 (instruction -> continue_instr .)
    PRINT           reduce using rule 22 (instruction -> continue_instr .)
    ID              reduce using rule 22 (instruction -> continue_instr .)
    IF              reduce using rule 22 (instruction -> continue_instr .)
    WHILE           reduce using rule 22 (instruction -> continue_instr .)
    REPEAT          reduce using rule 22 (instruction -> continue_instr .)
    RETURN          reduce using rule 22 (instruction -> continue_instr .)
    BREAK           reduce using rule 22 (instruction -> continue_instr .)
    CONTINUE        reduce using rule 22 (instruction -> continue_instr .)
    {               reduce using rule 22 (instruction -> continue_instr .)
    (               reduce using rule 22 (instruction -> continue_instr .)
    INTEGER         reduce using rule 22 (instruction -> continue_instr .)
    FLOAT           reduce using rule 22 (instruction -> continue_instr .)
    STRING          reduce using rule 22 (instruction -> continue_instr .)
    }               reduce using rule 22 (instruction -> continue_instr .)
    TYPE            reduce using rule 22 (instruction -> continue_instr .)
    error           reduce using rule 22 (instruction -> continue_instr .)
    $end            reduce using rule 22 (instruction -> continue_instr .)
    ELSE            reduce using rule 22 (instruction -> continue_instr .)


state 11

    (18) instruction -> while_instr .

    UNTIL           reduce using rule 18 (instruction -> while_instr .)
    PRINT           reduce using rule 18 (instruction -> while_instr .)
    ID              reduce using rule 18 (instruction -> while_instr .)
    IF              reduce using rule 18 (instruction -> while_instr .)
    WHILE           reduce using rule 18 (instruction -> while_instr .)
    REPEAT          reduce using rule 18 (instruction -> while_instr .)
    RETURN          reduce using rule 18 (instruction -> while_instr .)
    BREAK           reduce using rule 18 (instruction -> while_instr .)
    CONTINUE        reduce using rule 18 (instruction -> while_instr .)
    {               reduce using rule 18 (instruction -> while_instr .)
    (               reduce using rule 18 (instruction -> while_instr .)
    INTEGER         reduce using rule 18 (instruction -> while_instr .)
    FLOAT           reduce using rule 18 (instruction -> while_instr .)
    STRING          reduce using rule 18 (instruction -> while_instr .)
    }               reduce using rule 18 (instruction -> while_instr .)
    TYPE            reduce using rule 18 (instruction -> while_instr .)
    error           reduce using rule 18 (instruction -> while_instr .)
    $end            reduce using rule 18 (instruction -> while_instr .)
    ELSE            reduce using rule 18 (instruction -> while_instr .)


state 12

    (0) S' -> program .



state 13

    (41) const -> INTEGER .

    ;               reduce using rule 41 (const -> INTEGER .)
    +               reduce using rule 41 (const -> INTEGER .)
    -               reduce using rule 41 (const -> INTEGER .)
    *               reduce using rule 41 (const -> INTEGER .)
    /               reduce using rule 41 (const -> INTEGER .)
    %               reduce using rule 41 (const -> INTEGER .)
    |               reduce using rule 41 (const -> INTEGER .)
    &               reduce using rule 41 (const -> INTEGER .)
    ^               reduce using rule 41 (const -> INTEGER .)
    AND             reduce using rule 41 (const -> INTEGER .)
    OR              reduce using rule 41 (const -> INTEGER .)
    SHL             reduce using rule 41 (const -> INTEGER .)
    SHR             reduce using rule 41 (const -> INTEGER .)
    EQ              reduce using rule 41 (const -> INTEGER .)
    NEQ             reduce using rule 41 (const -> INTEGER .)
    >               reduce using rule 41 (const -> INTEGER .)
    <               reduce using rule 41 (const -> INTEGER .)
    LE              reduce using rule 41 (const -> INTEGER .)
    GE              reduce using rule 41 (const -> INTEGER .)
    )               reduce using rule 41 (const -> INTEGER .)
    ,               reduce using rule 41 (const -> INTEGER .)


state 14

    (35) repeat_instr -> REPEAT . instructions UNTIL condition ;
    (12) instructions -> . instructions instruction
    (13) instructions -> . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 42
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 17
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 23
    while_instr                    shift and go to state 11
    expression                     shift and go to state 33
    instructions                   shift and go to state 41

state 15

    (43) const -> STRING .

    ;               reduce using rule 43 (const -> STRING .)
    +               reduce using rule 43 (const -> STRING .)
    -               reduce using rule 43 (const -> STRING .)
    *               reduce using rule 43 (const -> STRING .)
    /               reduce using rule 43 (const -> STRING .)
    %               reduce using rule 43 (const -> STRING .)
    |               reduce using rule 43 (const -> STRING .)
    &               reduce using rule 43 (const -> STRING .)
    ^               reduce using rule 43 (const -> STRING .)
    AND             reduce using rule 43 (const -> STRING .)
    OR              reduce using rule 43 (const -> STRING .)
    SHL             reduce using rule 43 (const -> STRING .)
    SHR             reduce using rule 43 (const -> STRING .)
    EQ              reduce using rule 43 (const -> STRING .)
    NEQ             reduce using rule 43 (const -> STRING .)
    >               reduce using rule 43 (const -> STRING .)
    <               reduce using rule 43 (const -> STRING .)
    LE              reduce using rule 43 (const -> STRING .)
    GE              reduce using rule 43 (const -> STRING .)
    )               reduce using rule 43 (const -> STRING .)
    ,               reduce using rule 43 (const -> STRING .)


state 16

    (16) instruction -> assignment .

    UNTIL           reduce using rule 16 (instruction -> assignment .)
    PRINT           reduce using rule 16 (instruction -> assignment .)
    ID              reduce using rule 16 (instruction -> assignment .)
    IF              reduce using rule 16 (instruction -> assignment .)
    WHILE           reduce using rule 16 (instruction -> assignment .)
    REPEAT          reduce using rule 16 (instruction -> assignment .)
    RETURN          reduce using rule 16 (instruction -> assignment .)
    BREAK           reduce using rule 16 (instruction -> assignment .)
    CONTINUE        reduce using rule 16 (instruction -> assignment .)
    {               reduce using rule 16 (instruction -> assignment .)
    (               reduce using rule 16 (instruction -> assignment .)
    INTEGER         reduce using rule 16 (instruction -> assignment .)
    FLOAT           reduce using rule 16 (instruction -> assignment .)
    STRING          reduce using rule 16 (instruction -> assignment .)
    }               reduce using rule 16 (instruction -> assignment .)
    TYPE            reduce using rule 16 (instruction -> assignment .)
    error           reduce using rule 16 (instruction -> assignment .)
    $end            reduce using rule 16 (instruction -> assignment .)
    ELSE            reduce using rule 16 (instruction -> assignment .)


state 17

    (15) instruction -> labeled_instr .

    UNTIL           reduce using rule 15 (instruction -> labeled_instr .)
    PRINT           reduce using rule 15 (instruction -> labeled_instr .)
    ID              reduce using rule 15 (instruction -> labeled_instr .)
    IF              reduce using rule 15 (instruction -> labeled_instr .)
    WHILE           reduce using rule 15 (instruction -> labeled_instr .)
    REPEAT          reduce using rule 15 (instruction -> labeled_instr .)
    RETURN          reduce using rule 15 (instruction -> labeled_instr .)
    BREAK           reduce using rule 15 (instruction -> labeled_instr .)
    CONTINUE        reduce using rule 15 (instruction -> labeled_instr .)
    {               reduce using rule 15 (instruction -> labeled_instr .)
    (               reduce using rule 15 (instruction -> labeled_instr .)
    INTEGER         reduce using rule 15 (instruction -> labeled_instr .)
    FLOAT           reduce using rule 15 (instruction -> labeled_instr .)
    STRING          reduce using rule 15 (instruction -> labeled_instr .)
    }               reduce using rule 15 (instruction -> labeled_instr .)
    TYPE            reduce using rule 15 (instruction -> labeled_instr .)
    error           reduce using rule 15 (instruction -> labeled_instr .)
    $end            reduce using rule 15 (instruction -> labeled_instr .)
    ELSE            reduce using rule 15 (instruction -> labeled_instr .)


state 18

    (23) instruction -> compound_instr .

    UNTIL           reduce using rule 23 (instruction -> compound_instr .)
    PRINT           reduce using rule 23 (instruction -> compound_instr .)
    ID              reduce using rule 23 (instruction -> compound_instr .)
    IF              reduce using rule 23 (instruction -> compound_instr .)
    WHILE           reduce using rule 23 (instruction -> compound_instr .)
    REPEAT          reduce using rule 23 (instruction -> compound_instr .)
    RETURN          reduce using rule 23 (instruction -> compound_instr .)
    BREAK           reduce using rule 23 (instruction -> compound_instr .)
    CONTINUE        reduce using rule 23 (instruction -> compound_instr .)
    {               reduce using rule 23 (instruction -> compound_instr .)
    (               reduce using rule 23 (instruction -> compound_instr .)
    INTEGER         reduce using rule 23 (instruction -> compound_instr .)
    FLOAT           reduce using rule 23 (instruction -> compound_instr .)
    STRING          reduce using rule 23 (instruction -> compound_instr .)
    }               reduce using rule 23 (instruction -> compound_instr .)
    TYPE            reduce using rule 23 (instruction -> compound_instr .)
    error           reduce using rule 23 (instruction -> compound_instr .)
    $end            reduce using rule 23 (instruction -> compound_instr .)
    ELSE            reduce using rule 23 (instruction -> compound_instr .)


state 19

    (3) parts -> part .

    TYPE            reduce using rule 3 (parts -> part .)
    error           reduce using rule 3 (parts -> part .)
    PRINT           reduce using rule 3 (parts -> part .)
    ID              reduce using rule 3 (parts -> part .)
    IF              reduce using rule 3 (parts -> part .)
    WHILE           reduce using rule 3 (parts -> part .)
    REPEAT          reduce using rule 3 (parts -> part .)
    RETURN          reduce using rule 3 (parts -> part .)
    BREAK           reduce using rule 3 (parts -> part .)
    CONTINUE        reduce using rule 3 (parts -> part .)
    {               reduce using rule 3 (parts -> part .)
    (               reduce using rule 3 (parts -> part .)
    INTEGER         reduce using rule 3 (parts -> part .)
    FLOAT           reduce using rule 3 (parts -> part .)
    STRING          reduce using rule 3 (parts -> part .)
    $end            reduce using rule 3 (parts -> part .)
    }               reduce using rule 3 (parts -> part .)


state 20

    (6) part -> declaration .

    TYPE            reduce using rule 6 (part -> declaration .)
    error           reduce using rule 6 (part -> declaration .)
    PRINT           reduce using rule 6 (part -> declaration .)
    ID              reduce using rule 6 (part -> declaration .)
    IF              reduce using rule 6 (part -> declaration .)
    WHILE           reduce using rule 6 (part -> declaration .)
    REPEAT          reduce using rule 6 (part -> declaration .)
    RETURN          reduce using rule 6 (part -> declaration .)
    BREAK           reduce using rule 6 (part -> declaration .)
    CONTINUE        reduce using rule 6 (part -> declaration .)
    {               reduce using rule 6 (part -> declaration .)
    (               reduce using rule 6 (part -> declaration .)
    INTEGER         reduce using rule 6 (part -> declaration .)
    FLOAT           reduce using rule 6 (part -> declaration .)
    STRING          reduce using rule 6 (part -> declaration .)
    $end            reduce using rule 6 (part -> declaration .)
    }               reduce using rule 6 (part -> declaration .)


state 21

    (27) labeled_instr -> ID . : instruction
    (28) assignment -> ID . = expression ;
    (45) expression -> ID .
    (66) expression -> ID . ( expr_list_or_empty )
    (67) expression -> ID . ( error )

    :               shift and go to state 44
    =               shift and go to state 45
    ;               reduce using rule 45 (expression -> ID .)
    +               reduce using rule 45 (expression -> ID .)
    -               reduce using rule 45 (expression -> ID .)
    *               reduce using rule 45 (expression -> ID .)
    /               reduce using rule 45 (expression -> ID .)
    %               reduce using rule 45 (expression -> ID .)
    |               reduce using rule 45 (expression -> ID .)
    &               reduce using rule 45 (expression -> ID .)
    ^               reduce using rule 45 (expression -> ID .)
    AND             reduce using rule 45 (expression -> ID .)
    OR              reduce using rule 45 (expression -> ID .)
    SHL             reduce using rule 45 (expression -> ID .)
    SHR             reduce using rule 45 (expression -> ID .)
    EQ              reduce using rule 45 (expression -> ID .)
    NEQ             reduce using rule 45 (expression -> ID .)
    >               reduce using rule 45 (expression -> ID .)
    <               reduce using rule 45 (expression -> ID .)
    LE              reduce using rule 45 (expression -> ID .)
    GE              reduce using rule 45 (expression -> ID .)
    (               shift and go to state 43


state 22

    (29) choice_instr -> IF . ( condition ) instruction
    (30) choice_instr -> IF . ( condition ) instruction ELSE instruction
    (31) choice_instr -> IF . ( error ) instruction
    (32) choice_instr -> IF . ( error ) instruction ELSE instruction

    (               shift and go to state 46


state 23

    (21) instruction -> break_instr .

    UNTIL           reduce using rule 21 (instruction -> break_instr .)
    PRINT           reduce using rule 21 (instruction -> break_instr .)
    ID              reduce using rule 21 (instruction -> break_instr .)
    IF              reduce using rule 21 (instruction -> break_instr .)
    WHILE           reduce using rule 21 (instruction -> break_instr .)
    REPEAT          reduce using rule 21 (instruction -> break_instr .)
    RETURN          reduce using rule 21 (instruction -> break_instr .)
    BREAK           reduce using rule 21 (instruction -> break_instr .)
    CONTINUE        reduce using rule 21 (instruction -> break_instr .)
    {               reduce using rule 21 (instruction -> break_instr .)
    (               reduce using rule 21 (instruction -> break_instr .)
    INTEGER         reduce using rule 21 (instruction -> break_instr .)
    FLOAT           reduce using rule 21 (instruction -> break_instr .)
    STRING          reduce using rule 21 (instruction -> break_instr .)
    }               reduce using rule 21 (instruction -> break_instr .)
    TYPE            reduce using rule 21 (instruction -> break_instr .)
    error           reduce using rule 21 (instruction -> break_instr .)
    $end            reduce using rule 21 (instruction -> break_instr .)
    ELSE            reduce using rule 21 (instruction -> break_instr .)


state 24

    (5) part -> instruction .

    TYPE            reduce using rule 5 (part -> instruction .)
    error           reduce using rule 5 (part -> instruction .)
    PRINT           reduce using rule 5 (part -> instruction .)
    ID              reduce using rule 5 (part -> instruction .)
    IF              reduce using rule 5 (part -> instruction .)
    WHILE           reduce using rule 5 (part -> instruction .)
    REPEAT          reduce using rule 5 (part -> instruction .)
    RETURN          reduce using rule 5 (part -> instruction .)
    BREAK           reduce using rule 5 (part -> instruction .)
    CONTINUE        reduce using rule 5 (part -> instruction .)
    {               reduce using rule 5 (part -> instruction .)
    (               reduce using rule 5 (part -> instruction .)
    INTEGER         reduce using rule 5 (part -> instruction .)
    FLOAT           reduce using rule 5 (part -> instruction .)
    STRING          reduce using rule 5 (part -> instruction .)
    $end            reduce using rule 5 (part -> instruction .)
    }               reduce using rule 5 (part -> instruction .)


state 25

    (1) program -> parts .
    (2) parts -> parts . part
    (4) part -> . fundef
    (5) part -> . instruction
    (6) part -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (7) declaration -> . TYPE inits ;
    (8) declaration -> . error ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    $end            reduce using rule 1 (program -> parts .)
    TYPE            shift and go to state 31
    error           shift and go to state 30
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 16
    labeled_instr                  shift and go to state 17
    compound_instr                 shift and go to state 18
    part                           shift and go to state 47
    declaration                    shift and go to state 20
    break_instr                    shift and go to state 23
    instruction                    shift and go to state 24
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 33

state 26

    (4) part -> fundef .

    TYPE            reduce using rule 4 (part -> fundef .)
    error           reduce using rule 4 (part -> fundef .)
    PRINT           reduce using rule 4 (part -> fundef .)
    ID              reduce using rule 4 (part -> fundef .)
    IF              reduce using rule 4 (part -> fundef .)
    WHILE           reduce using rule 4 (part -> fundef .)
    REPEAT          reduce using rule 4 (part -> fundef .)
    RETURN          reduce using rule 4 (part -> fundef .)
    BREAK           reduce using rule 4 (part -> fundef .)
    CONTINUE        reduce using rule 4 (part -> fundef .)
    {               reduce using rule 4 (part -> fundef .)
    (               reduce using rule 4 (part -> fundef .)
    INTEGER         reduce using rule 4 (part -> fundef .)
    FLOAT           reduce using rule 4 (part -> fundef .)
    STRING          reduce using rule 4 (part -> fundef .)
    $end            reduce using rule 4 (part -> fundef .)
    }               reduce using rule 4 (part -> fundef .)


state 27

    (38) break_instr -> BREAK . ;

    ;               shift and go to state 48


state 28

    (14) instruction -> print_instr .

    UNTIL           reduce using rule 14 (instruction -> print_instr .)
    PRINT           reduce using rule 14 (instruction -> print_instr .)
    ID              reduce using rule 14 (instruction -> print_instr .)
    IF              reduce using rule 14 (instruction -> print_instr .)
    WHILE           reduce using rule 14 (instruction -> print_instr .)
    REPEAT          reduce using rule 14 (instruction -> print_instr .)
    RETURN          reduce using rule 14 (instruction -> print_instr .)
    BREAK           reduce using rule 14 (instruction -> print_instr .)
    CONTINUE        reduce using rule 14 (instruction -> print_instr .)
    {               reduce using rule 14 (instruction -> print_instr .)
    (               reduce using rule 14 (instruction -> print_instr .)
    INTEGER         reduce using rule 14 (instruction -> print_instr .)
    FLOAT           reduce using rule 14 (instruction -> print_instr .)
    STRING          reduce using rule 14 (instruction -> print_instr .)
    }               reduce using rule 14 (instruction -> print_instr .)
    TYPE            reduce using rule 14 (instruction -> print_instr .)
    error           reduce using rule 14 (instruction -> print_instr .)
    $end            reduce using rule 14 (instruction -> print_instr .)
    ELSE            reduce using rule 14 (instruction -> print_instr .)


state 29

    (37) continue_instr -> CONTINUE . ;

    ;               shift and go to state 49


state 30

    (8) declaration -> error . ;

    ;               shift and go to state 50


state 31

    (72) fundef -> TYPE . ID ( args_list_or_empty ) compound_instr
    (7) declaration -> TYPE . inits ;
    (9) inits -> . inits , init
    (10) inits -> . init
    (11) init -> . ID = expression

    ID              shift and go to state 53

    init                           shift and go to state 51
    inits                          shift and go to state 52

state 32

    (39) compound_instr -> { . parts }
    (2) parts -> . parts part
    (3) parts -> . part
    (4) part -> . fundef
    (5) part -> . instruction
    (6) part -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (7) declaration -> . TYPE inits ;
    (8) declaration -> . error ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    TYPE            shift and go to state 31
    error           shift and go to state 30
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    parts                          shift and go to state 54
    assignment                     shift and go to state 16
    labeled_instr                  shift and go to state 17
    compound_instr                 shift and go to state 18
    part                           shift and go to state 19
    declaration                    shift and go to state 20
    break_instr                    shift and go to state 23
    instruction                    shift and go to state 24
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 33

state 33

    (24) instruction -> expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 70
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 34

    (45) expression -> ID .
    (66) expression -> ID . ( expr_list_or_empty )
    (67) expression -> ID . ( error )

    +               reduce using rule 45 (expression -> ID .)
    -               reduce using rule 45 (expression -> ID .)
    *               reduce using rule 45 (expression -> ID .)
    /               reduce using rule 45 (expression -> ID .)
    %               reduce using rule 45 (expression -> ID .)
    |               reduce using rule 45 (expression -> ID .)
    &               reduce using rule 45 (expression -> ID .)
    ^               reduce using rule 45 (expression -> ID .)
    AND             reduce using rule 45 (expression -> ID .)
    OR              reduce using rule 45 (expression -> ID .)
    SHL             reduce using rule 45 (expression -> ID .)
    SHR             reduce using rule 45 (expression -> ID .)
    EQ              reduce using rule 45 (expression -> ID .)
    NEQ             reduce using rule 45 (expression -> ID .)
    >               reduce using rule 45 (expression -> ID .)
    <               reduce using rule 45 (expression -> ID .)
    LE              reduce using rule 45 (expression -> ID .)
    GE              reduce using rule 45 (expression -> ID .)
    ;               reduce using rule 45 (expression -> ID .)
    )               reduce using rule 45 (expression -> ID .)
    ,               reduce using rule 45 (expression -> ID .)
    (               shift and go to state 43


state 35

    (36) return_instr -> RETURN expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 74
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 36

    (26) print_instr -> PRINT error . ;

    ;               shift and go to state 75


state 37

    (25) print_instr -> PRINT expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 76
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 38

    (33) while_instr -> WHILE ( . condition ) instruction
    (34) while_instr -> WHILE ( . error ) instruction
    (40) condition -> . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 78
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 79
    condition                      shift and go to state 77

state 39

    (65) expression -> ( error . )

    )               shift and go to state 80


state 40

    (64) expression -> ( expression . )
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    )               shift and go to state 81
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 41

    (35) repeat_instr -> REPEAT instructions . UNTIL condition ;
    (12) instructions -> instructions . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    UNTIL           shift and go to state 82
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 83
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 17
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 23
    while_instr                    shift and go to state 11
    expression                     shift and go to state 33

state 42

    (13) instructions -> instruction .

    UNTIL           reduce using rule 13 (instructions -> instruction .)
    PRINT           reduce using rule 13 (instructions -> instruction .)
    ID              reduce using rule 13 (instructions -> instruction .)
    IF              reduce using rule 13 (instructions -> instruction .)
    WHILE           reduce using rule 13 (instructions -> instruction .)
    REPEAT          reduce using rule 13 (instructions -> instruction .)
    RETURN          reduce using rule 13 (instructions -> instruction .)
    BREAK           reduce using rule 13 (instructions -> instruction .)
    CONTINUE        reduce using rule 13 (instructions -> instruction .)
    {               reduce using rule 13 (instructions -> instruction .)
    (               reduce using rule 13 (instructions -> instruction .)
    INTEGER         reduce using rule 13 (instructions -> instruction .)
    FLOAT           reduce using rule 13 (instructions -> instruction .)
    STRING          reduce using rule 13 (instructions -> instruction .)


state 43

    (66) expression -> ID ( . expr_list_or_empty )
    (67) expression -> ID ( . error )
    (68) expr_list_or_empty -> . expr_list
    (69) expr_list_or_empty -> .
    (70) expr_list -> . expr_list , expression
    (71) expr_list -> . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 86
    )               reduce using rule 69 (expr_list_or_empty -> .)
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    expr_list                      shift and go to state 84
    expr_list_or_empty             shift and go to state 85
    expression                     shift and go to state 87
    const                          shift and go to state 8

state 44

    (27) labeled_instr -> ID : . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 88
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 23
    labeled_instr                  shift and go to state 17
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 6

state 45

    (28) assignment -> ID = . expression ;
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 89

state 46

    (29) choice_instr -> IF ( . condition ) instruction
    (30) choice_instr -> IF ( . condition ) instruction ELSE instruction
    (31) choice_instr -> IF ( . error ) instruction
    (32) choice_instr -> IF ( . error ) instruction ELSE instruction
    (40) condition -> . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    error           shift and go to state 91
    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 79
    condition                      shift and go to state 90

state 47

    (2) parts -> parts part .

    TYPE            reduce using rule 2 (parts -> parts part .)
    error           reduce using rule 2 (parts -> parts part .)
    PRINT           reduce using rule 2 (parts -> parts part .)
    ID              reduce using rule 2 (parts -> parts part .)
    IF              reduce using rule 2 (parts -> parts part .)
    WHILE           reduce using rule 2 (parts -> parts part .)
    REPEAT          reduce using rule 2 (parts -> parts part .)
    RETURN          reduce using rule 2 (parts -> parts part .)
    BREAK           reduce using rule 2 (parts -> parts part .)
    CONTINUE        reduce using rule 2 (parts -> parts part .)
    {               reduce using rule 2 (parts -> parts part .)
    (               reduce using rule 2 (parts -> parts part .)
    INTEGER         reduce using rule 2 (parts -> parts part .)
    FLOAT           reduce using rule 2 (parts -> parts part .)
    STRING          reduce using rule 2 (parts -> parts part .)
    $end            reduce using rule 2 (parts -> parts part .)
    }               reduce using rule 2 (parts -> parts part .)


state 48

    (38) break_instr -> BREAK ; .

    TYPE            reduce using rule 38 (break_instr -> BREAK ; .)
    error           reduce using rule 38 (break_instr -> BREAK ; .)
    PRINT           reduce using rule 38 (break_instr -> BREAK ; .)
    ID              reduce using rule 38 (break_instr -> BREAK ; .)
    IF              reduce using rule 38 (break_instr -> BREAK ; .)
    WHILE           reduce using rule 38 (break_instr -> BREAK ; .)
    REPEAT          reduce using rule 38 (break_instr -> BREAK ; .)
    RETURN          reduce using rule 38 (break_instr -> BREAK ; .)
    BREAK           reduce using rule 38 (break_instr -> BREAK ; .)
    CONTINUE        reduce using rule 38 (break_instr -> BREAK ; .)
    {               reduce using rule 38 (break_instr -> BREAK ; .)
    (               reduce using rule 38 (break_instr -> BREAK ; .)
    INTEGER         reduce using rule 38 (break_instr -> BREAK ; .)
    FLOAT           reduce using rule 38 (break_instr -> BREAK ; .)
    STRING          reduce using rule 38 (break_instr -> BREAK ; .)
    $end            reduce using rule 38 (break_instr -> BREAK ; .)
    UNTIL           reduce using rule 38 (break_instr -> BREAK ; .)
    }               reduce using rule 38 (break_instr -> BREAK ; .)
    ELSE            reduce using rule 38 (break_instr -> BREAK ; .)


state 49

    (37) continue_instr -> CONTINUE ; .

    }               reduce using rule 37 (continue_instr -> CONTINUE ; .)
    TYPE            reduce using rule 37 (continue_instr -> CONTINUE ; .)
    error           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    PRINT           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    ID              reduce using rule 37 (continue_instr -> CONTINUE ; .)
    IF              reduce using rule 37 (continue_instr -> CONTINUE ; .)
    WHILE           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    REPEAT          reduce using rule 37 (continue_instr -> CONTINUE ; .)
    RETURN          reduce using rule 37 (continue_instr -> CONTINUE ; .)
    BREAK           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    CONTINUE        reduce using rule 37 (continue_instr -> CONTINUE ; .)
    {               reduce using rule 37 (continue_instr -> CONTINUE ; .)
    (               reduce using rule 37 (continue_instr -> CONTINUE ; .)
    INTEGER         reduce using rule 37 (continue_instr -> CONTINUE ; .)
    FLOAT           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    STRING          reduce using rule 37 (continue_instr -> CONTINUE ; .)
    $end            reduce using rule 37 (continue_instr -> CONTINUE ; .)
    UNTIL           reduce using rule 37 (continue_instr -> CONTINUE ; .)
    ELSE            reduce using rule 37 (continue_instr -> CONTINUE ; .)


state 50

    (8) declaration -> error ; .

    TYPE            reduce using rule 8 (declaration -> error ; .)
    error           reduce using rule 8 (declaration -> error ; .)
    PRINT           reduce using rule 8 (declaration -> error ; .)
    ID              reduce using rule 8 (declaration -> error ; .)
    IF              reduce using rule 8 (declaration -> error ; .)
    WHILE           reduce using rule 8 (declaration -> error ; .)
    REPEAT          reduce using rule 8 (declaration -> error ; .)
    RETURN          reduce using rule 8 (declaration -> error ; .)
    BREAK           reduce using rule 8 (declaration -> error ; .)
    CONTINUE        reduce using rule 8 (declaration -> error ; .)
    {               reduce using rule 8 (declaration -> error ; .)
    (               reduce using rule 8 (declaration -> error ; .)
    INTEGER         reduce using rule 8 (declaration -> error ; .)
    FLOAT           reduce using rule 8 (declaration -> error ; .)
    STRING          reduce using rule 8 (declaration -> error ; .)
    $end            reduce using rule 8 (declaration -> error ; .)
    }               reduce using rule 8 (declaration -> error ; .)


state 51

    (10) inits -> init .

    ;               reduce using rule 10 (inits -> init .)
    ,               reduce using rule 10 (inits -> init .)


state 52

    (7) declaration -> TYPE inits . ;
    (9) inits -> inits . , init

    ;               shift and go to state 92
    ,               shift and go to state 93


state 53

    (72) fundef -> TYPE ID . ( args_list_or_empty ) compound_instr
    (11) init -> ID . = expression

    (               shift and go to state 94
    =               shift and go to state 95


state 54

    (39) compound_instr -> { parts . }
    (2) parts -> parts . part
    (4) part -> . fundef
    (5) part -> . instruction
    (6) part -> . declaration
    (72) fundef -> . TYPE ID ( args_list_or_empty ) compound_instr
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (7) declaration -> . TYPE inits ;
    (8) declaration -> . error ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    }               shift and go to state 96
    TYPE            shift and go to state 31
    error           shift and go to state 30
    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    assignment                     shift and go to state 16
    labeled_instr                  shift and go to state 17
    compound_instr                 shift and go to state 18
    part                           shift and go to state 47
    declaration                    shift and go to state 20
    break_instr                    shift and go to state 23
    instruction                    shift and go to state 24
    fundef                         shift and go to state 26
    print_instr                    shift and go to state 28
    expression                     shift and go to state 33

state 55

    (54) expression -> expression AND . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 97

state 56

    (57) expression -> expression SHR . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 98

state 57

    (62) expression -> expression LE . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 99

state 58

    (50) expression -> expression % . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 100

state 59

    (52) expression -> expression & . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 101

state 60

    (61) expression -> expression < . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 102

state 61

    (56) expression -> expression SHL . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 103

state 62

    (46) expression -> expression + . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 104

state 63

    (48) expression -> expression * . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 105

state 64

    (47) expression -> expression - . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 106

state 65

    (49) expression -> expression / . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 107

state 66

    (55) expression -> expression OR . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 108

state 67

    (58) expression -> expression EQ . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 109

state 68

    (60) expression -> expression > . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 110

state 69

    (63) expression -> expression GE . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 111

state 70

    (24) instruction -> expression ; .

    UNTIL           reduce using rule 24 (instruction -> expression ; .)
    PRINT           reduce using rule 24 (instruction -> expression ; .)
    ID              reduce using rule 24 (instruction -> expression ; .)
    IF              reduce using rule 24 (instruction -> expression ; .)
    WHILE           reduce using rule 24 (instruction -> expression ; .)
    REPEAT          reduce using rule 24 (instruction -> expression ; .)
    RETURN          reduce using rule 24 (instruction -> expression ; .)
    BREAK           reduce using rule 24 (instruction -> expression ; .)
    CONTINUE        reduce using rule 24 (instruction -> expression ; .)
    {               reduce using rule 24 (instruction -> expression ; .)
    (               reduce using rule 24 (instruction -> expression ; .)
    INTEGER         reduce using rule 24 (instruction -> expression ; .)
    FLOAT           reduce using rule 24 (instruction -> expression ; .)
    STRING          reduce using rule 24 (instruction -> expression ; .)
    }               reduce using rule 24 (instruction -> expression ; .)
    TYPE            reduce using rule 24 (instruction -> expression ; .)
    error           reduce using rule 24 (instruction -> expression ; .)
    $end            reduce using rule 24 (instruction -> expression ; .)
    ELSE            reduce using rule 24 (instruction -> expression ; .)


state 71

    (59) expression -> expression NEQ . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 112

state 72

    (51) expression -> expression | . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 113

state 73

    (53) expression -> expression ^ . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 114

state 74

    (36) return_instr -> RETURN expression ; .

    TYPE            reduce using rule 36 (return_instr -> RETURN expression ; .)
    error           reduce using rule 36 (return_instr -> RETURN expression ; .)
    PRINT           reduce using rule 36 (return_instr -> RETURN expression ; .)
    ID              reduce using rule 36 (return_instr -> RETURN expression ; .)
    IF              reduce using rule 36 (return_instr -> RETURN expression ; .)
    WHILE           reduce using rule 36 (return_instr -> RETURN expression ; .)
    REPEAT          reduce using rule 36 (return_instr -> RETURN expression ; .)
    RETURN          reduce using rule 36 (return_instr -> RETURN expression ; .)
    BREAK           reduce using rule 36 (return_instr -> RETURN expression ; .)
    CONTINUE        reduce using rule 36 (return_instr -> RETURN expression ; .)
    {               reduce using rule 36 (return_instr -> RETURN expression ; .)
    (               reduce using rule 36 (return_instr -> RETURN expression ; .)
    INTEGER         reduce using rule 36 (return_instr -> RETURN expression ; .)
    FLOAT           reduce using rule 36 (return_instr -> RETURN expression ; .)
    STRING          reduce using rule 36 (return_instr -> RETURN expression ; .)
    $end            reduce using rule 36 (return_instr -> RETURN expression ; .)
    UNTIL           reduce using rule 36 (return_instr -> RETURN expression ; .)
    }               reduce using rule 36 (return_instr -> RETURN expression ; .)
    ELSE            reduce using rule 36 (return_instr -> RETURN expression ; .)


state 75

    (26) print_instr -> PRINT error ; .

    TYPE            reduce using rule 26 (print_instr -> PRINT error ; .)
    error           reduce using rule 26 (print_instr -> PRINT error ; .)
    PRINT           reduce using rule 26 (print_instr -> PRINT error ; .)
    ID              reduce using rule 26 (print_instr -> PRINT error ; .)
    IF              reduce using rule 26 (print_instr -> PRINT error ; .)
    WHILE           reduce using rule 26 (print_instr -> PRINT error ; .)
    REPEAT          reduce using rule 26 (print_instr -> PRINT error ; .)
    RETURN          reduce using rule 26 (print_instr -> PRINT error ; .)
    BREAK           reduce using rule 26 (print_instr -> PRINT error ; .)
    CONTINUE        reduce using rule 26 (print_instr -> PRINT error ; .)
    {               reduce using rule 26 (print_instr -> PRINT error ; .)
    (               reduce using rule 26 (print_instr -> PRINT error ; .)
    INTEGER         reduce using rule 26 (print_instr -> PRINT error ; .)
    FLOAT           reduce using rule 26 (print_instr -> PRINT error ; .)
    STRING          reduce using rule 26 (print_instr -> PRINT error ; .)
    $end            reduce using rule 26 (print_instr -> PRINT error ; .)
    UNTIL           reduce using rule 26 (print_instr -> PRINT error ; .)
    }               reduce using rule 26 (print_instr -> PRINT error ; .)
    ELSE            reduce using rule 26 (print_instr -> PRINT error ; .)


state 76

    (25) print_instr -> PRINT expression ; .

    TYPE            reduce using rule 25 (print_instr -> PRINT expression ; .)
    error           reduce using rule 25 (print_instr -> PRINT expression ; .)
    PRINT           reduce using rule 25 (print_instr -> PRINT expression ; .)
    ID              reduce using rule 25 (print_instr -> PRINT expression ; .)
    IF              reduce using rule 25 (print_instr -> PRINT expression ; .)
    WHILE           reduce using rule 25 (print_instr -> PRINT expression ; .)
    REPEAT          reduce using rule 25 (print_instr -> PRINT expression ; .)
    RETURN          reduce using rule 25 (print_instr -> PRINT expression ; .)
    BREAK           reduce using rule 25 (print_instr -> PRINT expression ; .)
    CONTINUE        reduce using rule 25 (print_instr -> PRINT expression ; .)
    {               reduce using rule 25 (print_instr -> PRINT expression ; .)
    (               reduce using rule 25 (print_instr -> PRINT expression ; .)
    INTEGER         reduce using rule 25 (print_instr -> PRINT expression ; .)
    FLOAT           reduce using rule 25 (print_instr -> PRINT expression ; .)
    STRING          reduce using rule 25 (print_instr -> PRINT expression ; .)
    $end            reduce using rule 25 (print_instr -> PRINT expression ; .)
    UNTIL           reduce using rule 25 (print_instr -> PRINT expression ; .)
    }               reduce using rule 25 (print_instr -> PRINT expression ; .)
    ELSE            reduce using rule 25 (print_instr -> PRINT expression ; .)


state 77

    (33) while_instr -> WHILE ( condition . ) instruction

    )               shift and go to state 115


state 78

    (34) while_instr -> WHILE ( error . ) instruction

    )               shift and go to state 116


state 79

    (40) condition -> expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               reduce using rule 40 (condition -> expression .)
    )               reduce using rule 40 (condition -> expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 80

    (65) expression -> ( error ) .

    +               reduce using rule 65 (expression -> ( error ) .)
    -               reduce using rule 65 (expression -> ( error ) .)
    *               reduce using rule 65 (expression -> ( error ) .)
    /               reduce using rule 65 (expression -> ( error ) .)
    %               reduce using rule 65 (expression -> ( error ) .)
    |               reduce using rule 65 (expression -> ( error ) .)
    &               reduce using rule 65 (expression -> ( error ) .)
    ^               reduce using rule 65 (expression -> ( error ) .)
    AND             reduce using rule 65 (expression -> ( error ) .)
    OR              reduce using rule 65 (expression -> ( error ) .)
    SHL             reduce using rule 65 (expression -> ( error ) .)
    SHR             reduce using rule 65 (expression -> ( error ) .)
    EQ              reduce using rule 65 (expression -> ( error ) .)
    NEQ             reduce using rule 65 (expression -> ( error ) .)
    >               reduce using rule 65 (expression -> ( error ) .)
    <               reduce using rule 65 (expression -> ( error ) .)
    LE              reduce using rule 65 (expression -> ( error ) .)
    GE              reduce using rule 65 (expression -> ( error ) .)
    ;               reduce using rule 65 (expression -> ( error ) .)
    )               reduce using rule 65 (expression -> ( error ) .)
    ,               reduce using rule 65 (expression -> ( error ) .)


state 81

    (64) expression -> ( expression ) .

    +               reduce using rule 64 (expression -> ( expression ) .)
    -               reduce using rule 64 (expression -> ( expression ) .)
    *               reduce using rule 64 (expression -> ( expression ) .)
    /               reduce using rule 64 (expression -> ( expression ) .)
    %               reduce using rule 64 (expression -> ( expression ) .)
    |               reduce using rule 64 (expression -> ( expression ) .)
    &               reduce using rule 64 (expression -> ( expression ) .)
    ^               reduce using rule 64 (expression -> ( expression ) .)
    AND             reduce using rule 64 (expression -> ( expression ) .)
    OR              reduce using rule 64 (expression -> ( expression ) .)
    SHL             reduce using rule 64 (expression -> ( expression ) .)
    SHR             reduce using rule 64 (expression -> ( expression ) .)
    EQ              reduce using rule 64 (expression -> ( expression ) .)
    NEQ             reduce using rule 64 (expression -> ( expression ) .)
    >               reduce using rule 64 (expression -> ( expression ) .)
    <               reduce using rule 64 (expression -> ( expression ) .)
    LE              reduce using rule 64 (expression -> ( expression ) .)
    GE              reduce using rule 64 (expression -> ( expression ) .)
    ;               reduce using rule 64 (expression -> ( expression ) .)
    )               reduce using rule 64 (expression -> ( expression ) .)
    ,               reduce using rule 64 (expression -> ( expression ) .)


state 82

    (35) repeat_instr -> REPEAT instructions UNTIL . condition ;
    (40) condition -> . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 79
    condition                      shift and go to state 117

state 83

    (12) instructions -> instructions instruction .

    UNTIL           reduce using rule 12 (instructions -> instructions instruction .)
    PRINT           reduce using rule 12 (instructions -> instructions instruction .)
    ID              reduce using rule 12 (instructions -> instructions instruction .)
    IF              reduce using rule 12 (instructions -> instructions instruction .)
    WHILE           reduce using rule 12 (instructions -> instructions instruction .)
    REPEAT          reduce using rule 12 (instructions -> instructions instruction .)
    RETURN          reduce using rule 12 (instructions -> instructions instruction .)
    BREAK           reduce using rule 12 (instructions -> instructions instruction .)
    CONTINUE        reduce using rule 12 (instructions -> instructions instruction .)
    {               reduce using rule 12 (instructions -> instructions instruction .)
    (               reduce using rule 12 (instructions -> instructions instruction .)
    INTEGER         reduce using rule 12 (instructions -> instructions instruction .)
    FLOAT           reduce using rule 12 (instructions -> instructions instruction .)
    STRING          reduce using rule 12 (instructions -> instructions instruction .)


state 84

    (68) expr_list_or_empty -> expr_list .
    (70) expr_list -> expr_list . , expression

    )               reduce using rule 68 (expr_list_or_empty -> expr_list .)
    ,               shift and go to state 118


state 85

    (66) expression -> ID ( expr_list_or_empty . )

    )               shift and go to state 119


state 86

    (67) expression -> ID ( error . )

    )               shift and go to state 120


state 87

    (71) expr_list -> expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ,               reduce using rule 71 (expr_list -> expression .)
    )               reduce using rule 71 (expr_list -> expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 88

    (27) labeled_instr -> ID : instruction .

    UNTIL           reduce using rule 27 (labeled_instr -> ID : instruction .)
    PRINT           reduce using rule 27 (labeled_instr -> ID : instruction .)
    ID              reduce using rule 27 (labeled_instr -> ID : instruction .)
    IF              reduce using rule 27 (labeled_instr -> ID : instruction .)
    WHILE           reduce using rule 27 (labeled_instr -> ID : instruction .)
    REPEAT          reduce using rule 27 (labeled_instr -> ID : instruction .)
    RETURN          reduce using rule 27 (labeled_instr -> ID : instruction .)
    BREAK           reduce using rule 27 (labeled_instr -> ID : instruction .)
    CONTINUE        reduce using rule 27 (labeled_instr -> ID : instruction .)
    {               reduce using rule 27 (labeled_instr -> ID : instruction .)
    (               reduce using rule 27 (labeled_instr -> ID : instruction .)
    INTEGER         reduce using rule 27 (labeled_instr -> ID : instruction .)
    FLOAT           reduce using rule 27 (labeled_instr -> ID : instruction .)
    STRING          reduce using rule 27 (labeled_instr -> ID : instruction .)
    TYPE            reduce using rule 27 (labeled_instr -> ID : instruction .)
    error           reduce using rule 27 (labeled_instr -> ID : instruction .)
    $end            reduce using rule 27 (labeled_instr -> ID : instruction .)
    }               reduce using rule 27 (labeled_instr -> ID : instruction .)
    ELSE            reduce using rule 27 (labeled_instr -> ID : instruction .)


state 89

    (28) assignment -> ID = expression . ;
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               shift and go to state 121
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 90

    (29) choice_instr -> IF ( condition . ) instruction
    (30) choice_instr -> IF ( condition . ) instruction ELSE instruction

    )               shift and go to state 122


state 91

    (31) choice_instr -> IF ( error . ) instruction
    (32) choice_instr -> IF ( error . ) instruction ELSE instruction

    )               shift and go to state 123


state 92

    (7) declaration -> TYPE inits ; .

    TYPE            reduce using rule 7 (declaration -> TYPE inits ; .)
    error           reduce using rule 7 (declaration -> TYPE inits ; .)
    PRINT           reduce using rule 7 (declaration -> TYPE inits ; .)
    ID              reduce using rule 7 (declaration -> TYPE inits ; .)
    IF              reduce using rule 7 (declaration -> TYPE inits ; .)
    WHILE           reduce using rule 7 (declaration -> TYPE inits ; .)
    REPEAT          reduce using rule 7 (declaration -> TYPE inits ; .)
    RETURN          reduce using rule 7 (declaration -> TYPE inits ; .)
    BREAK           reduce using rule 7 (declaration -> TYPE inits ; .)
    CONTINUE        reduce using rule 7 (declaration -> TYPE inits ; .)
    {               reduce using rule 7 (declaration -> TYPE inits ; .)
    (               reduce using rule 7 (declaration -> TYPE inits ; .)
    INTEGER         reduce using rule 7 (declaration -> TYPE inits ; .)
    FLOAT           reduce using rule 7 (declaration -> TYPE inits ; .)
    STRING          reduce using rule 7 (declaration -> TYPE inits ; .)
    $end            reduce using rule 7 (declaration -> TYPE inits ; .)
    }               reduce using rule 7 (declaration -> TYPE inits ; .)


state 93

    (9) inits -> inits , . init
    (11) init -> . ID = expression

    ID              shift and go to state 125

    init                           shift and go to state 124

state 94

    (72) fundef -> TYPE ID ( . args_list_or_empty ) compound_instr
    (73) args_list_or_empty -> . args_list
    (74) args_list_or_empty -> .
    (75) args_list -> . args_list , arg
    (76) args_list -> . arg
    (77) arg -> . TYPE ID

    )               reduce using rule 74 (args_list_or_empty -> .)
    TYPE            shift and go to state 129

    args_list_or_empty             shift and go to state 127
    arg                            shift and go to state 128
    args_list                      shift and go to state 126

state 95

    (11) init -> ID = . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    const                          shift and go to state 8
    expression                     shift and go to state 130

state 96

    (39) compound_instr -> { parts } .

    TYPE            reduce using rule 39 (compound_instr -> { parts } .)
    error           reduce using rule 39 (compound_instr -> { parts } .)
    PRINT           reduce using rule 39 (compound_instr -> { parts } .)
    ID              reduce using rule 39 (compound_instr -> { parts } .)
    IF              reduce using rule 39 (compound_instr -> { parts } .)
    WHILE           reduce using rule 39 (compound_instr -> { parts } .)
    REPEAT          reduce using rule 39 (compound_instr -> { parts } .)
    RETURN          reduce using rule 39 (compound_instr -> { parts } .)
    BREAK           reduce using rule 39 (compound_instr -> { parts } .)
    CONTINUE        reduce using rule 39 (compound_instr -> { parts } .)
    {               reduce using rule 39 (compound_instr -> { parts } .)
    (               reduce using rule 39 (compound_instr -> { parts } .)
    INTEGER         reduce using rule 39 (compound_instr -> { parts } .)
    FLOAT           reduce using rule 39 (compound_instr -> { parts } .)
    STRING          reduce using rule 39 (compound_instr -> { parts } .)
    $end            reduce using rule 39 (compound_instr -> { parts } .)
    UNTIL           reduce using rule 39 (compound_instr -> { parts } .)
    }               reduce using rule 39 (compound_instr -> { parts } .)
    ELSE            reduce using rule 39 (compound_instr -> { parts } .)


state 97

    (54) expression -> expression AND expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    AND             reduce using rule 54 (expression -> expression AND expression .)
    OR              reduce using rule 54 (expression -> expression AND expression .)
    ;               reduce using rule 54 (expression -> expression AND expression .)
    )               reduce using rule 54 (expression -> expression AND expression .)
    ,               reduce using rule 54 (expression -> expression AND expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69

  ! +               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! -               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! *               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! /               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! %               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! |               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! &               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! ^               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! SHL             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! SHR             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! EQ              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! NEQ             [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! >               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! <               [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! LE              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! GE              [ reduce using rule 54 (expression -> expression AND expression .) ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]


state 98

    (57) expression -> expression SHR expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 57 (expression -> expression SHR expression .)
    &               reduce using rule 57 (expression -> expression SHR expression .)
    ^               reduce using rule 57 (expression -> expression SHR expression .)
    AND             reduce using rule 57 (expression -> expression SHR expression .)
    OR              reduce using rule 57 (expression -> expression SHR expression .)
    SHL             reduce using rule 57 (expression -> expression SHR expression .)
    SHR             reduce using rule 57 (expression -> expression SHR expression .)
    EQ              reduce using rule 57 (expression -> expression SHR expression .)
    NEQ             reduce using rule 57 (expression -> expression SHR expression .)
    >               reduce using rule 57 (expression -> expression SHR expression .)
    <               reduce using rule 57 (expression -> expression SHR expression .)
    LE              reduce using rule 57 (expression -> expression SHR expression .)
    GE              reduce using rule 57 (expression -> expression SHR expression .)
    ;               reduce using rule 57 (expression -> expression SHR expression .)
    )               reduce using rule 57 (expression -> expression SHR expression .)
    ,               reduce using rule 57 (expression -> expression SHR expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58

  ! +               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! -               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! *               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! /               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! %               [ reduce using rule 57 (expression -> expression SHR expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 99

    (62) expression -> expression LE expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 62 (expression -> expression LE expression .)
    &               reduce using rule 62 (expression -> expression LE expression .)
    ^               reduce using rule 62 (expression -> expression LE expression .)
    AND             reduce using rule 62 (expression -> expression LE expression .)
    OR              reduce using rule 62 (expression -> expression LE expression .)
    EQ              reduce using rule 62 (expression -> expression LE expression .)
    NEQ             reduce using rule 62 (expression -> expression LE expression .)
    >               reduce using rule 62 (expression -> expression LE expression .)
    <               reduce using rule 62 (expression -> expression LE expression .)
    LE              reduce using rule 62 (expression -> expression LE expression .)
    GE              reduce using rule 62 (expression -> expression LE expression .)
    ;               reduce using rule 62 (expression -> expression LE expression .)
    )               reduce using rule 62 (expression -> expression LE expression .)
    ,               reduce using rule 62 (expression -> expression LE expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56

  ! +               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! -               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! *               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! /               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! %               [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! SHL             [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! SHR             [ reduce using rule 62 (expression -> expression LE expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 100

    (50) expression -> expression % expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 50 (expression -> expression % expression .)
    -               reduce using rule 50 (expression -> expression % expression .)
    *               reduce using rule 50 (expression -> expression % expression .)
    /               reduce using rule 50 (expression -> expression % expression .)
    %               reduce using rule 50 (expression -> expression % expression .)
    |               reduce using rule 50 (expression -> expression % expression .)
    &               reduce using rule 50 (expression -> expression % expression .)
    ^               reduce using rule 50 (expression -> expression % expression .)
    AND             reduce using rule 50 (expression -> expression % expression .)
    OR              reduce using rule 50 (expression -> expression % expression .)
    SHL             reduce using rule 50 (expression -> expression % expression .)
    SHR             reduce using rule 50 (expression -> expression % expression .)
    EQ              reduce using rule 50 (expression -> expression % expression .)
    NEQ             reduce using rule 50 (expression -> expression % expression .)
    >               reduce using rule 50 (expression -> expression % expression .)
    <               reduce using rule 50 (expression -> expression % expression .)
    LE              reduce using rule 50 (expression -> expression % expression .)
    GE              reduce using rule 50 (expression -> expression % expression .)
    ;               reduce using rule 50 (expression -> expression % expression .)
    )               reduce using rule 50 (expression -> expression % expression .)
    ,               reduce using rule 50 (expression -> expression % expression .)

  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 65 ]
  ! %               [ shift and go to state 58 ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 101

    (52) expression -> expression & expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 52 (expression -> expression & expression .)
    &               reduce using rule 52 (expression -> expression & expression .)
    ^               reduce using rule 52 (expression -> expression & expression .)
    AND             reduce using rule 52 (expression -> expression & expression .)
    OR              reduce using rule 52 (expression -> expression & expression .)
    ;               reduce using rule 52 (expression -> expression & expression .)
    )               reduce using rule 52 (expression -> expression & expression .)
    ,               reduce using rule 52 (expression -> expression & expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69

  ! +               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! %               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! SHL             [ reduce using rule 52 (expression -> expression & expression .) ]
  ! SHR             [ reduce using rule 52 (expression -> expression & expression .) ]
  ! EQ              [ reduce using rule 52 (expression -> expression & expression .) ]
  ! NEQ             [ reduce using rule 52 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 52 (expression -> expression & expression .) ]
  ! LE              [ reduce using rule 52 (expression -> expression & expression .) ]
  ! GE              [ reduce using rule 52 (expression -> expression & expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]


state 102

    (61) expression -> expression < expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 61 (expression -> expression < expression .)
    &               reduce using rule 61 (expression -> expression < expression .)
    ^               reduce using rule 61 (expression -> expression < expression .)
    AND             reduce using rule 61 (expression -> expression < expression .)
    OR              reduce using rule 61 (expression -> expression < expression .)
    EQ              reduce using rule 61 (expression -> expression < expression .)
    NEQ             reduce using rule 61 (expression -> expression < expression .)
    >               reduce using rule 61 (expression -> expression < expression .)
    <               reduce using rule 61 (expression -> expression < expression .)
    LE              reduce using rule 61 (expression -> expression < expression .)
    GE              reduce using rule 61 (expression -> expression < expression .)
    ;               reduce using rule 61 (expression -> expression < expression .)
    )               reduce using rule 61 (expression -> expression < expression .)
    ,               reduce using rule 61 (expression -> expression < expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56

  ! +               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! %               [ reduce using rule 61 (expression -> expression < expression .) ]
  ! SHL             [ reduce using rule 61 (expression -> expression < expression .) ]
  ! SHR             [ reduce using rule 61 (expression -> expression < expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 103

    (56) expression -> expression SHL expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 56 (expression -> expression SHL expression .)
    &               reduce using rule 56 (expression -> expression SHL expression .)
    ^               reduce using rule 56 (expression -> expression SHL expression .)
    AND             reduce using rule 56 (expression -> expression SHL expression .)
    OR              reduce using rule 56 (expression -> expression SHL expression .)
    SHL             reduce using rule 56 (expression -> expression SHL expression .)
    SHR             reduce using rule 56 (expression -> expression SHL expression .)
    EQ              reduce using rule 56 (expression -> expression SHL expression .)
    NEQ             reduce using rule 56 (expression -> expression SHL expression .)
    >               reduce using rule 56 (expression -> expression SHL expression .)
    <               reduce using rule 56 (expression -> expression SHL expression .)
    LE              reduce using rule 56 (expression -> expression SHL expression .)
    GE              reduce using rule 56 (expression -> expression SHL expression .)
    ;               reduce using rule 56 (expression -> expression SHL expression .)
    )               reduce using rule 56 (expression -> expression SHL expression .)
    ,               reduce using rule 56 (expression -> expression SHL expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58

  ! +               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! -               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! *               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! /               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! %               [ reduce using rule 56 (expression -> expression SHL expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 104

    (46) expression -> expression + expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 46 (expression -> expression + expression .)
    -               reduce using rule 46 (expression -> expression + expression .)
    |               reduce using rule 46 (expression -> expression + expression .)
    &               reduce using rule 46 (expression -> expression + expression .)
    ^               reduce using rule 46 (expression -> expression + expression .)
    AND             reduce using rule 46 (expression -> expression + expression .)
    OR              reduce using rule 46 (expression -> expression + expression .)
    SHL             reduce using rule 46 (expression -> expression + expression .)
    SHR             reduce using rule 46 (expression -> expression + expression .)
    EQ              reduce using rule 46 (expression -> expression + expression .)
    NEQ             reduce using rule 46 (expression -> expression + expression .)
    >               reduce using rule 46 (expression -> expression + expression .)
    <               reduce using rule 46 (expression -> expression + expression .)
    LE              reduce using rule 46 (expression -> expression + expression .)
    GE              reduce using rule 46 (expression -> expression + expression .)
    ;               reduce using rule 46 (expression -> expression + expression .)
    )               reduce using rule 46 (expression -> expression + expression .)
    ,               reduce using rule 46 (expression -> expression + expression .)
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58

  ! *               [ reduce using rule 46 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 46 (expression -> expression + expression .) ]
  ! %               [ reduce using rule 46 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 105

    (48) expression -> expression * expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 48 (expression -> expression * expression .)
    -               reduce using rule 48 (expression -> expression * expression .)
    *               reduce using rule 48 (expression -> expression * expression .)
    /               reduce using rule 48 (expression -> expression * expression .)
    %               reduce using rule 48 (expression -> expression * expression .)
    |               reduce using rule 48 (expression -> expression * expression .)
    &               reduce using rule 48 (expression -> expression * expression .)
    ^               reduce using rule 48 (expression -> expression * expression .)
    AND             reduce using rule 48 (expression -> expression * expression .)
    OR              reduce using rule 48 (expression -> expression * expression .)
    SHL             reduce using rule 48 (expression -> expression * expression .)
    SHR             reduce using rule 48 (expression -> expression * expression .)
    EQ              reduce using rule 48 (expression -> expression * expression .)
    NEQ             reduce using rule 48 (expression -> expression * expression .)
    >               reduce using rule 48 (expression -> expression * expression .)
    <               reduce using rule 48 (expression -> expression * expression .)
    LE              reduce using rule 48 (expression -> expression * expression .)
    GE              reduce using rule 48 (expression -> expression * expression .)
    ;               reduce using rule 48 (expression -> expression * expression .)
    )               reduce using rule 48 (expression -> expression * expression .)
    ,               reduce using rule 48 (expression -> expression * expression .)

  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 65 ]
  ! %               [ shift and go to state 58 ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 106

    (47) expression -> expression - expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 47 (expression -> expression - expression .)
    -               reduce using rule 47 (expression -> expression - expression .)
    |               reduce using rule 47 (expression -> expression - expression .)
    &               reduce using rule 47 (expression -> expression - expression .)
    ^               reduce using rule 47 (expression -> expression - expression .)
    AND             reduce using rule 47 (expression -> expression - expression .)
    OR              reduce using rule 47 (expression -> expression - expression .)
    SHL             reduce using rule 47 (expression -> expression - expression .)
    SHR             reduce using rule 47 (expression -> expression - expression .)
    EQ              reduce using rule 47 (expression -> expression - expression .)
    NEQ             reduce using rule 47 (expression -> expression - expression .)
    >               reduce using rule 47 (expression -> expression - expression .)
    <               reduce using rule 47 (expression -> expression - expression .)
    LE              reduce using rule 47 (expression -> expression - expression .)
    GE              reduce using rule 47 (expression -> expression - expression .)
    ;               reduce using rule 47 (expression -> expression - expression .)
    )               reduce using rule 47 (expression -> expression - expression .)
    ,               reduce using rule 47 (expression -> expression - expression .)
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58

  ! *               [ reduce using rule 47 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression - expression .) ]
  ! %               [ reduce using rule 47 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 107

    (49) expression -> expression / expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    +               reduce using rule 49 (expression -> expression / expression .)
    -               reduce using rule 49 (expression -> expression / expression .)
    *               reduce using rule 49 (expression -> expression / expression .)
    /               reduce using rule 49 (expression -> expression / expression .)
    %               reduce using rule 49 (expression -> expression / expression .)
    |               reduce using rule 49 (expression -> expression / expression .)
    &               reduce using rule 49 (expression -> expression / expression .)
    ^               reduce using rule 49 (expression -> expression / expression .)
    AND             reduce using rule 49 (expression -> expression / expression .)
    OR              reduce using rule 49 (expression -> expression / expression .)
    SHL             reduce using rule 49 (expression -> expression / expression .)
    SHR             reduce using rule 49 (expression -> expression / expression .)
    EQ              reduce using rule 49 (expression -> expression / expression .)
    NEQ             reduce using rule 49 (expression -> expression / expression .)
    >               reduce using rule 49 (expression -> expression / expression .)
    <               reduce using rule 49 (expression -> expression / expression .)
    LE              reduce using rule 49 (expression -> expression / expression .)
    GE              reduce using rule 49 (expression -> expression / expression .)
    ;               reduce using rule 49 (expression -> expression / expression .)
    )               reduce using rule 49 (expression -> expression / expression .)
    ,               reduce using rule 49 (expression -> expression / expression .)

  ! +               [ shift and go to state 62 ]
  ! -               [ shift and go to state 64 ]
  ! *               [ shift and go to state 63 ]
  ! /               [ shift and go to state 65 ]
  ! %               [ shift and go to state 58 ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! SHL             [ shift and go to state 61 ]
  ! SHR             [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 108

    (55) expression -> expression OR expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    OR              reduce using rule 55 (expression -> expression OR expression .)
    ;               reduce using rule 55 (expression -> expression OR expression .)
    )               reduce using rule 55 (expression -> expression OR expression .)
    ,               reduce using rule 55 (expression -> expression OR expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69

  ! +               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! -               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! *               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! /               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! %               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! |               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! &               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! ^               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! AND             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! SHL             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! SHR             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! EQ              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! NEQ             [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! >               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! <               [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! LE              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! GE              [ reduce using rule 55 (expression -> expression OR expression .) ]
  ! OR              [ shift and go to state 66 ]


state 109

    (58) expression -> expression EQ expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 58 (expression -> expression EQ expression .)
    &               reduce using rule 58 (expression -> expression EQ expression .)
    ^               reduce using rule 58 (expression -> expression EQ expression .)
    AND             reduce using rule 58 (expression -> expression EQ expression .)
    OR              reduce using rule 58 (expression -> expression EQ expression .)
    EQ              reduce using rule 58 (expression -> expression EQ expression .)
    NEQ             reduce using rule 58 (expression -> expression EQ expression .)
    >               reduce using rule 58 (expression -> expression EQ expression .)
    <               reduce using rule 58 (expression -> expression EQ expression .)
    LE              reduce using rule 58 (expression -> expression EQ expression .)
    GE              reduce using rule 58 (expression -> expression EQ expression .)
    ;               reduce using rule 58 (expression -> expression EQ expression .)
    )               reduce using rule 58 (expression -> expression EQ expression .)
    ,               reduce using rule 58 (expression -> expression EQ expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56

  ! +               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! -               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! *               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! /               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! %               [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! SHL             [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! SHR             [ reduce using rule 58 (expression -> expression EQ expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 110

    (60) expression -> expression > expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 60 (expression -> expression > expression .)
    &               reduce using rule 60 (expression -> expression > expression .)
    ^               reduce using rule 60 (expression -> expression > expression .)
    AND             reduce using rule 60 (expression -> expression > expression .)
    OR              reduce using rule 60 (expression -> expression > expression .)
    EQ              reduce using rule 60 (expression -> expression > expression .)
    NEQ             reduce using rule 60 (expression -> expression > expression .)
    >               reduce using rule 60 (expression -> expression > expression .)
    <               reduce using rule 60 (expression -> expression > expression .)
    LE              reduce using rule 60 (expression -> expression > expression .)
    GE              reduce using rule 60 (expression -> expression > expression .)
    ;               reduce using rule 60 (expression -> expression > expression .)
    )               reduce using rule 60 (expression -> expression > expression .)
    ,               reduce using rule 60 (expression -> expression > expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56

  ! +               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! %               [ reduce using rule 60 (expression -> expression > expression .) ]
  ! SHL             [ reduce using rule 60 (expression -> expression > expression .) ]
  ! SHR             [ reduce using rule 60 (expression -> expression > expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 111

    (63) expression -> expression GE expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 63 (expression -> expression GE expression .)
    &               reduce using rule 63 (expression -> expression GE expression .)
    ^               reduce using rule 63 (expression -> expression GE expression .)
    AND             reduce using rule 63 (expression -> expression GE expression .)
    OR              reduce using rule 63 (expression -> expression GE expression .)
    EQ              reduce using rule 63 (expression -> expression GE expression .)
    NEQ             reduce using rule 63 (expression -> expression GE expression .)
    >               reduce using rule 63 (expression -> expression GE expression .)
    <               reduce using rule 63 (expression -> expression GE expression .)
    LE              reduce using rule 63 (expression -> expression GE expression .)
    GE              reduce using rule 63 (expression -> expression GE expression .)
    ;               reduce using rule 63 (expression -> expression GE expression .)
    )               reduce using rule 63 (expression -> expression GE expression .)
    ,               reduce using rule 63 (expression -> expression GE expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56

  ! +               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! -               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! *               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! /               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! %               [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! SHL             [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! SHR             [ reduce using rule 63 (expression -> expression GE expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 112

    (59) expression -> expression NEQ expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 59 (expression -> expression NEQ expression .)
    &               reduce using rule 59 (expression -> expression NEQ expression .)
    ^               reduce using rule 59 (expression -> expression NEQ expression .)
    AND             reduce using rule 59 (expression -> expression NEQ expression .)
    OR              reduce using rule 59 (expression -> expression NEQ expression .)
    EQ              reduce using rule 59 (expression -> expression NEQ expression .)
    NEQ             reduce using rule 59 (expression -> expression NEQ expression .)
    >               reduce using rule 59 (expression -> expression NEQ expression .)
    <               reduce using rule 59 (expression -> expression NEQ expression .)
    LE              reduce using rule 59 (expression -> expression NEQ expression .)
    GE              reduce using rule 59 (expression -> expression NEQ expression .)
    ;               reduce using rule 59 (expression -> expression NEQ expression .)
    )               reduce using rule 59 (expression -> expression NEQ expression .)
    ,               reduce using rule 59 (expression -> expression NEQ expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    SHL             shift and go to state 61
    SHR             shift and go to state 56

  ! +               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! -               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! *               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! /               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! %               [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! SHL             [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! SHR             [ reduce using rule 59 (expression -> expression NEQ expression .) ]
  ! |               [ shift and go to state 72 ]
  ! &               [ shift and go to state 59 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]
  ! EQ              [ shift and go to state 67 ]
  ! NEQ             [ shift and go to state 71 ]
  ! >               [ shift and go to state 68 ]
  ! <               [ shift and go to state 60 ]
  ! LE              [ shift and go to state 57 ]
  ! GE              [ shift and go to state 69 ]


state 113

    (51) expression -> expression | expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 51 (expression -> expression | expression .)
    AND             reduce using rule 51 (expression -> expression | expression .)
    OR              reduce using rule 51 (expression -> expression | expression .)
    ;               reduce using rule 51 (expression -> expression | expression .)
    )               reduce using rule 51 (expression -> expression | expression .)
    ,               reduce using rule 51 (expression -> expression | expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    &               shift and go to state 59
    ^               shift and go to state 73
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69

  ! +               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! %               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! ^               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! SHL             [ reduce using rule 51 (expression -> expression | expression .) ]
  ! SHR             [ reduce using rule 51 (expression -> expression | expression .) ]
  ! EQ              [ reduce using rule 51 (expression -> expression | expression .) ]
  ! NEQ             [ reduce using rule 51 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 51 (expression -> expression | expression .) ]
  ! LE              [ reduce using rule 51 (expression -> expression | expression .) ]
  ! GE              [ reduce using rule 51 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 72 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]


state 114

    (53) expression -> expression ^ expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    |               reduce using rule 53 (expression -> expression ^ expression .)
    ^               reduce using rule 53 (expression -> expression ^ expression .)
    AND             reduce using rule 53 (expression -> expression ^ expression .)
    OR              reduce using rule 53 (expression -> expression ^ expression .)
    ;               reduce using rule 53 (expression -> expression ^ expression .)
    )               reduce using rule 53 (expression -> expression ^ expression .)
    ,               reduce using rule 53 (expression -> expression ^ expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    &               shift and go to state 59
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69

  ! +               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! -               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! *               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! /               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! %               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! &               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! SHL             [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! SHR             [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! EQ              [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! NEQ             [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! >               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! <               [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! LE              [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! GE              [ reduce using rule 53 (expression -> expression ^ expression .) ]
  ! |               [ shift and go to state 72 ]
  ! ^               [ shift and go to state 73 ]
  ! AND             [ shift and go to state 55 ]
  ! OR              [ shift and go to state 66 ]


state 115

    (33) while_instr -> WHILE ( condition ) . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 131
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 17
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 23
    while_instr                    shift and go to state 11
    expression                     shift and go to state 33

state 116

    (34) while_instr -> WHILE ( error ) . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 132
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 23
    labeled_instr                  shift and go to state 17
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 6

state 117

    (35) repeat_instr -> REPEAT instructions UNTIL condition . ;

    ;               shift and go to state 133


state 118

    (70) expr_list -> expr_list , . expression
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    ID              shift and go to state 34
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    expression                     shift and go to state 134
    const                          shift and go to state 8

state 119

    (66) expression -> ID ( expr_list_or_empty ) .

    +               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    -               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    *               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    /               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    %               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    |               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    &               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    ^               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    AND             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    OR              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    SHL             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    SHR             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    EQ              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    NEQ             reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    >               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    <               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    LE              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    GE              reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    ;               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    )               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)
    ,               reduce using rule 66 (expression -> ID ( expr_list_or_empty ) .)


state 120

    (67) expression -> ID ( error ) .

    +               reduce using rule 67 (expression -> ID ( error ) .)
    -               reduce using rule 67 (expression -> ID ( error ) .)
    *               reduce using rule 67 (expression -> ID ( error ) .)
    /               reduce using rule 67 (expression -> ID ( error ) .)
    %               reduce using rule 67 (expression -> ID ( error ) .)
    |               reduce using rule 67 (expression -> ID ( error ) .)
    &               reduce using rule 67 (expression -> ID ( error ) .)
    ^               reduce using rule 67 (expression -> ID ( error ) .)
    AND             reduce using rule 67 (expression -> ID ( error ) .)
    OR              reduce using rule 67 (expression -> ID ( error ) .)
    SHL             reduce using rule 67 (expression -> ID ( error ) .)
    SHR             reduce using rule 67 (expression -> ID ( error ) .)
    EQ              reduce using rule 67 (expression -> ID ( error ) .)
    NEQ             reduce using rule 67 (expression -> ID ( error ) .)
    >               reduce using rule 67 (expression -> ID ( error ) .)
    <               reduce using rule 67 (expression -> ID ( error ) .)
    LE              reduce using rule 67 (expression -> ID ( error ) .)
    GE              reduce using rule 67 (expression -> ID ( error ) .)
    ;               reduce using rule 67 (expression -> ID ( error ) .)
    )               reduce using rule 67 (expression -> ID ( error ) .)
    ,               reduce using rule 67 (expression -> ID ( error ) .)


state 121

    (28) assignment -> ID = expression ; .

    UNTIL           reduce using rule 28 (assignment -> ID = expression ; .)
    PRINT           reduce using rule 28 (assignment -> ID = expression ; .)
    ID              reduce using rule 28 (assignment -> ID = expression ; .)
    IF              reduce using rule 28 (assignment -> ID = expression ; .)
    WHILE           reduce using rule 28 (assignment -> ID = expression ; .)
    REPEAT          reduce using rule 28 (assignment -> ID = expression ; .)
    RETURN          reduce using rule 28 (assignment -> ID = expression ; .)
    BREAK           reduce using rule 28 (assignment -> ID = expression ; .)
    CONTINUE        reduce using rule 28 (assignment -> ID = expression ; .)
    {               reduce using rule 28 (assignment -> ID = expression ; .)
    (               reduce using rule 28 (assignment -> ID = expression ; .)
    INTEGER         reduce using rule 28 (assignment -> ID = expression ; .)
    FLOAT           reduce using rule 28 (assignment -> ID = expression ; .)
    STRING          reduce using rule 28 (assignment -> ID = expression ; .)
    TYPE            reduce using rule 28 (assignment -> ID = expression ; .)
    error           reduce using rule 28 (assignment -> ID = expression ; .)
    $end            reduce using rule 28 (assignment -> ID = expression ; .)
    }               reduce using rule 28 (assignment -> ID = expression ; .)
    ELSE            reduce using rule 28 (assignment -> ID = expression ; .)


state 122

    (29) choice_instr -> IF ( condition ) . instruction
    (30) choice_instr -> IF ( condition ) . instruction ELSE instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 135
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 17
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 23
    while_instr                    shift and go to state 11
    expression                     shift and go to state 33

state 123

    (31) choice_instr -> IF ( error ) . instruction
    (32) choice_instr -> IF ( error ) . instruction ELSE instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 136
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 23
    labeled_instr                  shift and go to state 17
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 6

state 124

    (9) inits -> inits , init .

    ;               reduce using rule 9 (inits -> inits , init .)
    ,               reduce using rule 9 (inits -> inits , init .)


state 125

    (11) init -> ID . = expression

    =               shift and go to state 95


state 126

    (73) args_list_or_empty -> args_list .
    (75) args_list -> args_list . , arg

    )               reduce using rule 73 (args_list_or_empty -> args_list .)
    ,               shift and go to state 137


state 127

    (72) fundef -> TYPE ID ( args_list_or_empty . ) compound_instr

    )               shift and go to state 138


state 128

    (76) args_list -> arg .

    ,               reduce using rule 76 (args_list -> arg .)
    )               reduce using rule 76 (args_list -> arg .)


state 129

    (77) arg -> TYPE . ID

    ID              shift and go to state 139


state 130

    (11) init -> ID = expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ;               reduce using rule 11 (init -> ID = expression .)
    ,               reduce using rule 11 (init -> ID = expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 131

    (33) while_instr -> WHILE ( condition ) instruction .

    TYPE            reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    error           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    PRINT           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    ID              reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    IF              reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    WHILE           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    REPEAT          reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    RETURN          reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    BREAK           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    CONTINUE        reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    {               reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    (               reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    INTEGER         reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    FLOAT           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    STRING          reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    $end            reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    UNTIL           reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    }               reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)
    ELSE            reduce using rule 33 (while_instr -> WHILE ( condition ) instruction .)


state 132

    (34) while_instr -> WHILE ( error ) instruction .

    TYPE            reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    error           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    PRINT           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    ID              reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    IF              reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    WHILE           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    REPEAT          reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    RETURN          reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    BREAK           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    CONTINUE        reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    {               reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    (               reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    INTEGER         reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    FLOAT           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    STRING          reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    $end            reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    UNTIL           reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    }               reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)
    ELSE            reduce using rule 34 (while_instr -> WHILE ( error ) instruction .)


state 133

    (35) repeat_instr -> REPEAT instructions UNTIL condition ; .

    TYPE            reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    error           reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    PRINT           reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ID              reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    IF              reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    WHILE           reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    REPEAT          reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    RETURN          reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    BREAK           reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    CONTINUE        reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    {               reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    (               reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    INTEGER         reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    FLOAT           reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    STRING          reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    $end            reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    UNTIL           reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    }               reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)
    ELSE            reduce using rule 35 (repeat_instr -> REPEAT instructions UNTIL condition ; .)


state 134

    (70) expr_list -> expr_list , expression .
    (46) expression -> expression . + expression
    (47) expression -> expression . - expression
    (48) expression -> expression . * expression
    (49) expression -> expression . / expression
    (50) expression -> expression . % expression
    (51) expression -> expression . | expression
    (52) expression -> expression . & expression
    (53) expression -> expression . ^ expression
    (54) expression -> expression . AND expression
    (55) expression -> expression . OR expression
    (56) expression -> expression . SHL expression
    (57) expression -> expression . SHR expression
    (58) expression -> expression . EQ expression
    (59) expression -> expression . NEQ expression
    (60) expression -> expression . > expression
    (61) expression -> expression . < expression
    (62) expression -> expression . LE expression
    (63) expression -> expression . GE expression

    ,               reduce using rule 70 (expr_list -> expr_list , expression .)
    )               reduce using rule 70 (expr_list -> expr_list , expression .)
    +               shift and go to state 62
    -               shift and go to state 64
    *               shift and go to state 63
    /               shift and go to state 65
    %               shift and go to state 58
    |               shift and go to state 72
    &               shift and go to state 59
    ^               shift and go to state 73
    AND             shift and go to state 55
    OR              shift and go to state 66
    SHL             shift and go to state 61
    SHR             shift and go to state 56
    EQ              shift and go to state 67
    NEQ             shift and go to state 71
    >               shift and go to state 68
    <               shift and go to state 60
    LE              shift and go to state 57
    GE              shift and go to state 69


state 135

    (29) choice_instr -> IF ( condition ) instruction .
    (30) choice_instr -> IF ( condition ) instruction . ELSE instruction

    UNTIL           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    PRINT           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    ID              reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    IF              reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    WHILE           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    REPEAT          reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    RETURN          reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    BREAK           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    CONTINUE        reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    {               reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    (               reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    INTEGER         reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    FLOAT           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    STRING          reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    }               reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    TYPE            reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    error           reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    $end            reduce using rule 29 (choice_instr -> IF ( condition ) instruction .)
    ELSE            shift and go to state 140

  ! ELSE            [ reduce using rule 29 (choice_instr -> IF ( condition ) instruction .) ]


state 136

    (31) choice_instr -> IF ( error ) instruction .
    (32) choice_instr -> IF ( error ) instruction . ELSE instruction

    UNTIL           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    PRINT           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    ID              reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    IF              reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    WHILE           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    REPEAT          reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    RETURN          reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    BREAK           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    CONTINUE        reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    {               reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    (               reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    INTEGER         reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    FLOAT           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    STRING          reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    }               reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    TYPE            reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    error           reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    $end            reduce using rule 31 (choice_instr -> IF ( error ) instruction .)
    ELSE            shift and go to state 141

  ! ELSE            [ reduce using rule 31 (choice_instr -> IF ( error ) instruction .) ]


state 137

    (75) args_list -> args_list , . arg
    (77) arg -> . TYPE ID

    TYPE            shift and go to state 129

    arg                            shift and go to state 142

state 138

    (72) fundef -> TYPE ID ( args_list_or_empty ) . compound_instr
    (39) compound_instr -> . { parts }

    {               shift and go to state 32

    compound_instr                 shift and go to state 143

state 139

    (77) arg -> TYPE ID .

    ,               reduce using rule 77 (arg -> TYPE ID .)
    )               reduce using rule 77 (arg -> TYPE ID .)


state 140

    (30) choice_instr -> IF ( condition ) instruction ELSE . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 144
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    labeled_instr                  shift and go to state 17
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    repeat_instr                   shift and go to state 6
    break_instr                    shift and go to state 23
    while_instr                    shift and go to state 11
    expression                     shift and go to state 33

state 141

    (32) choice_instr -> IF ( error ) instruction ELSE . instruction
    (14) instruction -> . print_instr
    (15) instruction -> . labeled_instr
    (16) instruction -> . assignment
    (17) instruction -> . choice_instr
    (18) instruction -> . while_instr
    (19) instruction -> . repeat_instr
    (20) instruction -> . return_instr
    (21) instruction -> . break_instr
    (22) instruction -> . continue_instr
    (23) instruction -> . compound_instr
    (24) instruction -> . expression ;
    (25) print_instr -> . PRINT expression ;
    (26) print_instr -> . PRINT error ;
    (27) labeled_instr -> . ID : instruction
    (28) assignment -> . ID = expression ;
    (29) choice_instr -> . IF ( condition ) instruction
    (30) choice_instr -> . IF ( condition ) instruction ELSE instruction
    (31) choice_instr -> . IF ( error ) instruction
    (32) choice_instr -> . IF ( error ) instruction ELSE instruction
    (33) while_instr -> . WHILE ( condition ) instruction
    (34) while_instr -> . WHILE ( error ) instruction
    (35) repeat_instr -> . REPEAT instructions UNTIL condition ;
    (36) return_instr -> . RETURN expression ;
    (38) break_instr -> . BREAK ;
    (37) continue_instr -> . CONTINUE ;
    (39) compound_instr -> . { parts }
    (44) expression -> . const
    (45) expression -> . ID
    (46) expression -> . expression + expression
    (47) expression -> . expression - expression
    (48) expression -> . expression * expression
    (49) expression -> . expression / expression
    (50) expression -> . expression % expression
    (51) expression -> . expression | expression
    (52) expression -> . expression & expression
    (53) expression -> . expression ^ expression
    (54) expression -> . expression AND expression
    (55) expression -> . expression OR expression
    (56) expression -> . expression SHL expression
    (57) expression -> . expression SHR expression
    (58) expression -> . expression EQ expression
    (59) expression -> . expression NEQ expression
    (60) expression -> . expression > expression
    (61) expression -> . expression < expression
    (62) expression -> . expression LE expression
    (63) expression -> . expression GE expression
    (64) expression -> . ( expression )
    (65) expression -> . ( error )
    (66) expression -> . ID ( expr_list_or_empty )
    (67) expression -> . ID ( error )
    (41) const -> . INTEGER
    (42) const -> . FLOAT
    (43) const -> . STRING

    PRINT           shift and go to state 4
    ID              shift and go to state 21
    IF              shift and go to state 22
    WHILE           shift and go to state 5
    REPEAT          shift and go to state 14
    RETURN          shift and go to state 2
    BREAK           shift and go to state 27
    CONTINUE        shift and go to state 29
    {               shift and go to state 32
    (               shift and go to state 9
    INTEGER         shift and go to state 13
    FLOAT           shift and go to state 1
    STRING          shift and go to state 15

    return_instr                   shift and go to state 7
    const                          shift and go to state 8
    assignment                     shift and go to state 16
    instruction                    shift and go to state 145
    compound_instr                 shift and go to state 18
    continue_instr                 shift and go to state 10
    while_instr                    shift and go to state 11
    print_instr                    shift and go to state 28
    choice_instr                   shift and go to state 3
    break_instr                    shift and go to state 23
    labeled_instr                  shift and go to state 17
    expression                     shift and go to state 33
    repeat_instr                   shift and go to state 6

state 142

    (75) args_list -> args_list , arg .

    ,               reduce using rule 75 (args_list -> args_list , arg .)
    )               reduce using rule 75 (args_list -> args_list , arg .)


state 143

    (72) fundef -> TYPE ID ( args_list_or_empty ) compound_instr .

    TYPE            reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    error           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    PRINT           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    ID              reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    IF              reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    WHILE           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    REPEAT          reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    RETURN          reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    BREAK           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    CONTINUE        reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    {               reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    (               reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    INTEGER         reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    FLOAT           reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    STRING          reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    $end            reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)
    }               reduce using rule 72 (fundef -> TYPE ID ( args_list_or_empty ) compound_instr .)


state 144

    (30) choice_instr -> IF ( condition ) instruction ELSE instruction .

    UNTIL           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    PRINT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ID              reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    IF              reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    WHILE           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    REPEAT          reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    RETURN          reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    BREAK           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    {               reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    (               reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    INTEGER         reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    FLOAT           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    STRING          reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    }               reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    TYPE            reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    error           reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    $end            reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)
    ELSE            reduce using rule 30 (choice_instr -> IF ( condition ) instruction ELSE instruction .)


state 145

    (32) choice_instr -> IF ( error ) instruction ELSE instruction .

    UNTIL           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    PRINT           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ID              reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    IF              reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    WHILE           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    REPEAT          reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    RETURN          reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    BREAK           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    CONTINUE        reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    {               reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    (               reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    INTEGER         reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    FLOAT           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    STRING          reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    }               reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    TYPE            reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    error           reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    $end            reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)
    ELSE            reduce using rule 32 (choice_instr -> IF ( error ) instruction ELSE instruction .)

